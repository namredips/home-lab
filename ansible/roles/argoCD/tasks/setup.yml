---

- name: Setup argoCD helm repo
  become_user: "{{ kube_admin_user }}"
  kubernetes.core.helm_repository:
    name: argo
    repo_url: https://argoproj.github.io/argo-helm
    state: present


- name: Install ArgoCD Helm chart
  become_user: "{{ kube_admin_user }}"
  kubernetes.core.helm:
    chart_ref: argo/argo-cd
    release_name: argocd
    namespace: argocd
    create_namespace: true
    values: 
      server:
        service:
          type: LoadBalancer

- name: Create Certificate for ArgoCD server
  become_user: "{{ kube_admin_user }}"
  kubernetes.core.k8s:
    api_version: cert-manager.io/v1
    kind: Certificate
    name: argocd-server-cert
    namespace: argocd
    state: present
    definition:
      metadata:
        name: argocd-server-cert
        namespace: argocd
      spec:
        secretName: argocd-server-tls
        dnsNames:
          - argocd.infiquetra.com 
        issuerRef:
          name: letsencrypt-microk8s
          kind: ClusterIssuer

- name: Create Certificate for ArgoCD repo server
  become_user: "{{ kube_admin_user }}"
  kubernetes.core.k8s:
    api_version: cert-manager.io/v1
    kind: Certificate
    name: argocd-repo-server-cert
    namespace: argocd
    state: present
    definition:
      metadata:
        name: argocd-repo-server-cert
        namespace: argocd
      spec:
        secretName: argocd-repo-server-tls
        dnsNames:
          - argocd-repo.infiquetra.com 
        issuerRef:
          name: letsencrypt-microk8s
          kind: ClusterIssuer

- name: Create Certificate for Dex server
  become_user: "{{ kube_admin_user }}"
  kubernetes.core.k8s:
    api_version: cert-manager.io/v1
    kind: Certificate
    name: argo-dex-server-cert
    namespace: argocd
    state: present
    definition:
      metadata:
        name: argo-dex-server-cert
        namespace: argocd
      spec:
        secretName: argo-dex-server-tls
        dnsNames:
          - dex.infiquetra.com
        issuerRef:
          name: letsencrypt-microk8s
          kind: ClusterIssuer


- name: Wait for ArgoCD Pods to be ready
  become_user: "{{ kube_admin_user }}"
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Pod
    namespace: argocd
    label_selectors:
      - app.kubernetes.io/instance=argocd
  register: argocd_pods

- name: Ensure all ArgoCD Pods are ready
  become_user: "{{ kube_admin_user }}"
  ansible.builtin.wait_for:
    path: "{{ item.status.podIP }}"
    state: started
    delay: 10
    timeout: 300
  loop: "{{ argocd_pods.resources }}"
  when: item.status.phase == 'Running'


- name: Update ArgoCD server service to use LoadBalancer with cert-manager TLS
  kubernetes.core.k8s:
    api_version: v1
    kind: Service
    namespace: argocd
    name: argocd-server
    definition:
      metadata:
        name: argocd-server
        namespace: argocd
        annotations:
          service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
          service.beta.kubernetes.io/aws-load-balancer-ssl-cert: argocd-server-tls
          service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
      spec:
        type: LoadBalancer
        ports:
          - name: https
            port: 443
            targetPort: 8080
            protocol: TCP
        selector:
          app.kubernetes.io/name: argocd-server
