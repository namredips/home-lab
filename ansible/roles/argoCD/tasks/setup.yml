---

- name: Setup argoCD helm repo
  become_user: "{{ kube_admin_user }}"
  kubernetes.core.helm_repository:
    name: argo
    repo_url: https://argoproj.github.io/argo-helm
    state: present



- name: Get existing secret data
  become_user: "{{ kube_admin_user }}"
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: cert-manager
    name: infiquetra-tls
  register: infiquetra_secret


- name: Install ArgoCD Helm chart
  become_user: "{{ kube_admin_user }}"
  kubernetes.core.helm:
    chart_ref: argo/argo-cd
    release_name: argocd
    namespace: argocd
    create_namespace: true
    values: 
      redis-ha:
        enabled: true
      controller:
        replicas: 1
      resource:
        requests:
          cpu: 100m
          memory: 256Mi
        limits:
          cpu: 500m
          memory: 1024Mi
      server:
        autoscaling:
          enabled: true
          minReplicas: 2
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1024Mi
        service:
          type: LoadBalancer
          annotations:
            service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
            service.beta.kubernetes.io/aws-load-balancer-ssl-cert: infiquetra-tls
            service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
            external-dns.alpha.kubernetes.io/hostname: argocd.infiquetra.com
          servicePortHttpsName: https
          servicePortHttps: 443
          srvicePortHttpsAppProtocol: TCP
      repoServer:
        autoscaling:
          enabled: true
          minReplicas: 2
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1024Mi
      dex:
        enabled: false

- name: Create new secret from existing secret
  become_user: "{{ kube_admin_user }}"
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      metadata:
        name: "{{ item.name }}"
        namespace: argocd
      type: kubernetes.io/tls
      data:
        tls.crt: "{{ infiquetra_secret.resources[0].data['tls.crt'] }}"
        tls.key: "{{ infiquetra_secret.resources[0].data['tls.key'] }}"
  with_items: "{{ argocd_secrets }}"
  loop_control:
    label: "{{ item.name }}"



