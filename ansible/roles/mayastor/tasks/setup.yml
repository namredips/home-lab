---

- name: Get current addons state
  command:
    cmd: microk8s.status --format yaml
  changed_when: no
  register: microk8s_status
  check_mode: no

- name: Set current state fact
  set_fact:
    microk8s_status: "{{ microk8s_status.stdout | from_yaml }}"

- name: Waiting for microk8s to be ready on microk8s host master
  command: "microk8s status --wait-ready"
  changed_when: false

- name: Ensure maystor is enabled
  loop: "{{ microk8s_status.addons }}"
  loop_control:
    label: "{{ item.name }}"
  command:
    cmd: microk8s.enable {{ item.name }}
  when:
    - item.name == 'mayastor'
    - item.status == 'disabled'

- name: Pause to let mayastor bootstrap
  pause:
    minutes: 1

- name: Wait for mayastor pods to become ready
  loop:
    - etcd
    - etcd-operator-mayastor
    - csi-node
    - agent-core
    - operator-diskpool
    - api-rest
    - csi-controller
  loop_control:
    label: "{{ item }}"
  shell: "kubectl wait --namespace=mayastor --for=condition=Ready pods --selector app={{ item }} --timeout=600s"
  register: mayastor_ready

- name: Wait for io-engine pods to become ready
  shell: "kubectl wait --namespace=mayastor --for=condition=Ready pods --selector app=io-engine --timeout=120s"
  register: io_engine_ready
  failed_when: false

- name: Restart any hung mayastor io-engine pods
  loop: "{{ io_engine_ready.stderr.splitlines() }}"
  loop_control:
    label: "{{ item }}"
  shell: "kubectl -n mayastor delete {{ item.split() | last }}"
  when: io_engine_ready.rc > 0
  register: deleted_io_engine_pods

- name: Wait for mayastor pods to become ready after restarting io-engine pods
  loop:
    - etcd
    - etcd-operator-mayastor
    - csi-node
    - agent-core
    - operator-diskpool
    - api-rest
    - csi-controller
    - io-engine
  loop_control:
    label: "{{ item }}"
  shell: "kubectl wait --namespace=mayastor --for=condition=Ready pods --selector app={{ item }} --timeout=600s"
  when: io_engine_ready.rc > 0

- name: Add disk pools
  k8s:
    verify_ssl: no
    definition:
      apiVersion: "openebs.io/v1alpha1"
      kind: DiskPool
      metadata:
        name: "microk8s-{{ item.0.host }}-diskpool-{{ item.1.split('/') | last }}"
        namespace: mayastor
      spec:
        node: "{{ item.0.host }}"
        disks: ["{{ item.1 }}"]
  loop: "{{ disk_pools | subelements('disks', 'skip_missing=True') }}"
  loop_control:
    label: "{{ item.0.host }} ==> {{ item.1 }}"

